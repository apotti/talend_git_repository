package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class General {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
   /* public static void helloExample(String message) {
        if (message == null) {
            message = "World"; //$NON-NLS-1$
        }
        System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
    }*/
    
    public static String checkString(String storeList,String storeNbr){
    	String flag = "";
    	System.out.println("storeList"+storeList);
    	System.out.println("storeNbr"+storeNbr);
    	if(storeList.contains(storeNbr)){
    		flag = storeNbr;
    	}
    	
    	return flag;
    }
    
    public static String getSpecialCharacter(String value){
    	String specialChar = "";
    	specialChar = Character.toString((char)Integer.parseInt(value));
    	return specialChar;
    }
    
    public static String getNewLine(String var){
    	String newLine = null;
    	int asciiNum = Integer.parseInt(var);
    	if(asciiNum==10){
    		newLine = Character.toString((char)10);
    	}else{
    		newLine = Character.toString((char)13)+Character.toString((char)10);
    	}
    	return newLine;
    }
}
